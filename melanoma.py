# -*- coding: utf-8 -*-
"""melanoma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e5vQLwHvJggMVDjQ5ughugZAzH1pKg_-

##  Librerías
"""

import os
import shutil
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.callbacks import Callback, EarlyStopping
from sklearn.metrics import classification_report

"""##  Directorios"""

# Directorio principal
directorio_dataset = '/content/dataset/'
directorio_benigno = os.path.join(directorio_dataset, 'benigno')
directorio_maligno = os.path.join(directorio_dataset, 'maligno')
os.makedirs(directorio_benigno, exist_ok=True)
os.makedirs(directorio_maligno, exist_ok=True)

# Directorio train
directorio_train = '/content/train'
directorio_train_benigno = os.path.join(directorio_train, 'benigno')
directorio_train_maligno = os.path.join(directorio_train, 'maligno')
os.makedirs(directorio_train_benigno, exist_ok=True)
os.makedirs(directorio_train_maligno, exist_ok=True)

# Directorio test
directorio_test = '/content/test'
directorio_test_benigno = os.path.join(directorio_test, 'benigno')
directorio_test_maligno = os.path.join(directorio_test, 'maligno')
os.makedirs(directorio_test_benigno, exist_ok=True)
os.makedirs(directorio_test_maligno, exist_ok=True)

"""## Split, train, test"""

# Listas de rutas y etiquetas
ruta = []
etiqueta = []

# Split imágenes de directorio "Benigno" en train y test
imagenes_benigno = os.listdir(directorio_benigno)
benigno_train, benigno_test = train_test_split(imagenes_benigno, test_size=0.2, random_state=42)

# Mueve imágenes de directorio "Benigno" a directorios train y test
for imagen in benigno_train:
    origen = os.path.join(directorio_benigno, imagen)
    destino = os.path.join(directorio_train_benigno, imagen)
    shutil.copy(origen, destino)
    ruta.append(destino)
    etiqueta.append(destino.split(os.path.sep)[-2])

for imagen in benigno_test:
    origen = os.path.join(directorio_benigno, imagen)
    destino = os.path.join(directorio_test_benigno, imagen)
    shutil.copy(origen, destino)
    ruta.append(destino)
    etiqueta.append(destino.split(os.path.sep)[-2])

# Split imágenes de directorio "Maligno" en train y test
imagenes_maligno = os.listdir(directorio_maligno)
maligno_train, maligno_test = train_test_split(imagenes_maligno, test_size=0.2, random_state=42)

# Mueve imágenes de directorio "Maligno" a directorios train y test
for imagen in maligno_train:
    origen = os.path.join(directorio_maligno, imagen)
    destino = os.path.join(directorio_train_maligno, imagen)
    shutil.copy(origen, destino)
    ruta.append(destino)
    etiqueta.append(destino.split(os.path.sep)[-2])

for imagen in maligno_test:
    origen = os.path.join(directorio_maligno, imagen)
    destino = os.path.join(directorio_test_maligno, imagen)
    shutil.copy(origen, destino)
    ruta.append(destino)
    etiqueta.append(destino.split(os.path.sep)[-2])

"""## Datos"""

# Crear DataFrame
datos = pd.concat([pd.DataFrame(ruta), pd.DataFrame(etiqueta)], axis=1)
datos.columns=["Ruta", "Etiqueta"]

# Split DataFrame en train y test
train, test = train_test_split(datos, test_size=0.2, random_state=42)

"""## Aumento de imágenes (Image Augmentation)"""

datos_generados = ImageDataGenerator(preprocessing_function=preprocess_input)

train_gen = datos_generados.flow_from_dataframe(
    dataframe = train,
    x_col = "Ruta",
    y_col = "Etiqueta",
    tamaño_objetivo = (100, 100),
    modo = "Categorical",
    batch = 32,
    shuffle = True,
    seed = 42
)

valid_gen = datos_generados.flow_from_dataframe(
    dataframe = test,
    x_col = "Ruta",
    y_col = "Etiqueta",
    tamaño_objetivo = (100, 100),
    modo = "Categorical",
    batch = 32,
    shuffle = False,
    seed = 42
)

test_gen = datos_generados.flow_from_dataframe(
    dataframe = test,
    x_col = "Ruta",
    y_col = "Etiqueta",
    tamaño_objetivo = (100, 100),
    modo = "Categorical",
    batch = 32,
    shuffle = False,
    seed = 42
)

"""## Pre-entrenamiento de modelo"""

modelo_preentrenado = ResNet50(
    input_shape = (100, 100, 3),
    include_top = False,
    weights ='imagenet',
    pooling = 'avg'
)

modelo_preentrenado.trainable = False

inputs = modelo_preentrenado.input # input_shape - Capa de entrada
x = Dense(128, activation = 'relu')(modelo_preentrenado.output) # pooling - primera capa
x = Dense(128, activation = 'relu')(x) # segunda capa
outputs = Dense(2, activation='softmax')(x) # capa de salida

modelo = Model(inputs=inputs, outputs=outputs)
modelo.summary()

"""## Entrenamiento de modelo (compile)"""

modelo.compile(
    optimizer = 'Adam',
    loss = 'categorical_crossentropy',
    metrics = ['accuracy']
)

callbacks = [EarlyStopping(monitor='val_accuracy',
                           min_delta=0,
                           patience=2,
                           mode='auto')]

historia = modelo.fit(
    train_gen,
    validation_data = valid_gen,
    epochs = 20
)

"""## Guardar modelo"""

modelo.save('modelo_ResNet50.h5')

"""## Graficar modelo"""

pd.DataFrame(historia.history)[['accuracy', 'val_accuracy']].plot()
plt.title('Accuracy')
plt.show()

pd.DataFrame(historia.history)[['loss', 'val_loss']].plot()
plt.title('Loss')
plt.show()

resultados = modelo.evaluate(test_gen, verbose=0)
print(f'Test Loss: {resultados[0]}')
print(f'Test Accuracy: {resultados[1]}')

"""## Predecir etiqueta"""

prediccion = modelo.predict(test_gen)
prediccion = np.argmax(prediccion, axis=1)
etiquetas = (train_gen.class_indices)
etiquetas = dict((v, k) for k, v in etiquetas.items())
prediccion = [etiquetas[k] for k in prediccion]

y_test = list(test.Etiqueta) #Nombre de columna "Etiqueta"
print(classification_report(y_test, prediccion))

fig, axes = plt.subplots(nrows=round(len(test.Ruta)/2), ncols=2, figsize=(12,8), subplot_kw={'xticks':[], 'yticks':[]})

for i, ax in enumerate(axes.flat):
    ax.imshow(plt.imread(test.Ruta.iloc[i]))
    ax.set_title(f'Verdadero: {test.Etiqueta.iloc[i]}\nPredicted: {prediccion[i]}')
plt.tight_layout()
plt.show()

"""## Eliminar carpetas"""

#%cd /content/dataset
#!rm -rf 'maligno'
#!rm -rf 'dataset'
#!rm -rf 'train'
#!rm -rf 'test'